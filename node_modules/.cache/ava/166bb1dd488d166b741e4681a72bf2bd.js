'use strict';

/**
 * Con test se define cada uno de los casos
 * de prueba de manera concurrente y ahislada,
 * por ende no es recomendado manejar globales
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const test = require('ava');

/**
 * Esta funcion corre un test que pasa,
 * no hace verificacion ni validacion.
 * Para este caso recibe un texto y un calback con las acerciones
 * t: es un acercion llamado asi por
 * convencion
 * acercion: comandos que se corren para
 * garantizar que el resultado de una
 * ejecucion x sea el esperado
 */
test('this should pass', t => {
  t.pass();
});

/**
 * Si falla
 */
test('this shoul fail', t => {
  t.fail();
});

/**
 * test asincrono
 * soporta async/await
 */
test('it should support async/await', (() => {
  var _ref = _asyncToGenerator(function* (t) {
    let p = Promise.resolve(42);
    let secret = yield p;
    t.is(secret, 42);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());
//# sourceMappingURL=..\node_modules\.cache\ava\166bb1dd488d166b741e4681a72bf2bd.js.map