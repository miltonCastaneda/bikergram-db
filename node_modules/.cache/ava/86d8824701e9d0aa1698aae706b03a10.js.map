{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","dbName","v4","beforeEach","t","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","after","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","id","public_id","encode","truthy","createdAt","likeImage","result","images","getImages","saveImages","map","img","Promise","all","length"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst Db = require('../')\r\nconst fixtures = require('./fixtures')\r\n\r\nconst dbName = `bikergram_${uuid.v4()}`\r\n\r\n// se ejecuta antes del test\r\ntest.beforeEach('setup database', async t => {\r\n  const dbName = `platzigram_${uuid.v4()}`\r\n  const db = new Db({ db: dbName })\r\n  await db.connect()\r\n  t.context.db = db\r\n  t.context.dbName = dbName\r\n  t.true(db.connected, 'should be conncected')\r\n})\r\n// se ejecuta despues de los test a menos de que se interrumpa la ejecucion\r\ntest.afterEach.always('disconnect database', async t => {\r\n  let db = t.context.db\r\n  let dbName = t.context.dbName\r\n\r\n  await db.disconnect()\r\n  t.false(db.connected, 'should be disconnected')\r\n\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\n// siempre se ejecuta despues de todos los test\r\ntest.after.always('cleanup database', async t => {\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('save image', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\r\n\r\n  let image = fixtures.getImage()\r\n\r\n  let created = await db.saveImage(image)\r\n  t.is(created.description, image.description)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.deepEqual(created.tags, [ 'awesome', 'tags', 'platzi' ])\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.public_id, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('like image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.likeImage, 'function', 'like is a function')\r\n\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.likeImage(created.public_id)\r\n\r\n  t.true(result.liked)\r\n  t.is(result.likes, image.likes + 1)\r\n})\r\n\r\ntest('get image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImage, 'function', 'getImage is a function')\r\n\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.getImage(created.public_id)\r\n\r\n  t.deepEqual(created, result)\r\n})\r\n\r\ntest('list all images', async t => {\r\n  let db = t.context.db\r\n  let images = fixtures.getImages(3)\r\n  let saveImages = images.map(img => db.saveImage(img))\r\n  let created = await Promise.all(saveImages)\r\n  let result = await db.getImages()\r\n\r\n  t.is(created.length, result.length)\r\n})\r\n"]}