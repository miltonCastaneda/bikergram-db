'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const test = require('ava');
const uuid = require('uuid-base62');
const r = require('rethinkdb');
const Db = require('../');

const dbName = `bikergram_${uuid.v4()}`;
const db = new Db({ db: dbName });
// se ejecuta antes del test
test.before('setup database', (() => {
  var _ref = _asyncToGenerator(function* (t) {
    var _rec = new _powerAssertRecorder();

    yield db.connect();
    t.true(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').connected, 'arguments/0'), {
      content: 't.true(db.connected, \'should be conncected\')',
      filepath: 'test\\db-test.js',
      line: 13,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[7,9]},"property":{"type":"Identifier","name":"connected","range":[10,19]},"computed":false,"range":[7,19]},{"type":"StringLiteral","value":"should be conncected","range":[21,43]}],"range":[0,44]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"db","range":[7,9]},{"type":{"label":"."},"range":[9,10]},{"type":{"label":"name"},"value":"connected","range":[10,19]},{"type":{"label":","},"range":[19,20]},{"type":{"label":"string"},"value":"should be conncected","range":[21,43]},{"type":{"label":")"},"range":[43,44]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), 'should be conncected');
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());
// se ejecuta despues de los test a menos de que se interrumpa la ejecucion
test.after('disconnect database', (() => {
  var _ref2 = _asyncToGenerator(function* (t) {
    var _rec2 = new _powerAssertRecorder();

    yield db.disconnect();
    t.false(_rec2._expr(_rec2._capt(_rec2._capt(db, 'arguments/0/object').connected, 'arguments/0'), {
      content: 't.false(db.connected, \'should be disconnected\')',
      filepath: 'test\\db-test.js',
      line: 18,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"false","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[8,10]},"property":{"type":"Identifier","name":"connected","range":[11,20]},"computed":false,"range":[8,20]},{"type":"StringLiteral","value":"should be disconnected","range":[22,46]}],"range":[0,47]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"false"},"value":"false","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"db","range":[8,10]},{"type":{"label":"."},"range":[10,11]},{"type":{"label":"name"},"value":"connected","range":[11,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"string"},"value":"should be disconnected","range":[22,46]},{"type":{"label":")"},"range":[46,47]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), 'should be disconnected');
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
})());

// siempre se ejecuta despues de todos los test
test.after.always('cleanup database', (() => {
  var _ref3 = _asyncToGenerator(function* (t) {
    let conn = yield r.connect({});
    yield r.dbDrop(dbName).run(conn);
  });

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
})());

test('save image', (() => {
  var _ref4 = _asyncToGenerator(function* (t) {
    var _rec3 = new _powerAssertRecorder();

    t.is(typeof db.saveImage, 'function', 'saveImage is function');

    let image = {
      description: 'an #awesome picture with #tags #platzi',
      url: `https://platzigram.test/${uuid.v4()}.jpg`,
      likes: 0,
      liked: false,
      user_id: uuid.uuid()
    };

    let created = yield db.saveImage(image);
    t.is(created.description, image.description);
    t.is(created.url, image.url);
    t.is(created.likes, image.likes);
    t.is(created.liked, image.liked);
    t.deepEqual(created.tags, ['awesome', 'tags', 'platzi']);
    t.is(created.user_id, image.user_id);
    t.is(typeof created.id, 'string');
    t.is(created.public_id, uuid.encode(created.id));
    t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(created, 'arguments/0/object').createdAt, 'arguments/0'), {
      content: 't.truthy(created.createdAt)',
      filepath: 'test\\db-test.js',
      line: 47,
      async: true,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"created","range":[9,16]},"property":{"type":"Identifier","name":"createdAt","range":[17,26]},"computed":false,"range":[9,26]}],"range":[0,27]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"created","range":[9,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"createdAt","range":[17,26]},{"type":{"label":")"},"range":[26,27]}]',
      visitorKeys: _powerAssertVisitorKeys
    }));
  });

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
})());
//# sourceMappingURL=..\node_modules\.cache\ava\fb0109b2c79e4f6f2b1b07b9da3b6349.js.map